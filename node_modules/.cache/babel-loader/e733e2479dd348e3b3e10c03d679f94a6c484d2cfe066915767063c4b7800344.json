{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useSignUp.js\nimport { useState } from 'react';\nconst useSignUp = () => {\n  _s();\n  const [privateKey, setPrivateKey] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const handleSignUp = async () => {\n    try {\n      // 동적으로 elliptic 라이브러리 import\n      const {\n        ec\n      } = await import('elliptic');\n      const EC = new ec('secp256k1');\n\n      // 키 쌍 생성\n      const key = EC.genKeyPair();\n      const newPrivateKey = key.getPrivate('hex');\n\n      // 로컬 스토리지에 개인 키 저장\n      localStorage.setItem('privateKey', newPrivateKey);\n\n      // 상태 업데이트\n      setPrivateKey(newPrivateKey);\n      setMessage('Sign Up Completed. Your private key has been saved in local storage');\n      setError(''); // 에러 메시지 초기화\n\n      console.log('Sign Up Completed');\n    } catch (err) {\n      console.error('Error during sign up:', err);\n      setError('Failed to generate key pair. Please ensure all dependencies are installed.');\n    }\n  };\n  const copyPrivateKey = () => {\n    // 누르면 privatekey 복사될 수 있도록 해주세요 !\n  };\n  return {\n    privateKey,\n    message,\n    error,\n    handleSignUp,\n    copyPrivateKey\n  };\n};\n_s(useSignUp, \"GePoZ0PSmK711F8I7b1Hqwyzwmg=\");\nexport default useSignUp;","map":{"version":3,"names":["useState","useSignUp","_s","privateKey","setPrivateKey","message","setMessage","error","setError","handleSignUp","ec","EC","key","genKeyPair","newPrivateKey","getPrivate","localStorage","setItem","console","log","err","copyPrivateKey"],"sources":["/Users/yoon/Documents/MatterTunnel/client/src/modules/auth/hooks/useSignUp.js"],"sourcesContent":["// hooks/useSignUp.js\nimport { useState } from 'react';\n\nconst useSignUp = () => {\n  const [privateKey, setPrivateKey] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSignUp = async () => {\n    try {\n      // 동적으로 elliptic 라이브러리 import\n      const { ec } = await import('elliptic');\n      const EC = new ec('secp256k1');\n\n      // 키 쌍 생성\n      const key = EC.genKeyPair();\n      const newPrivateKey = key.getPrivate('hex');\n      \n      // 로컬 스토리지에 개인 키 저장\n      localStorage.setItem('privateKey', newPrivateKey);\n      \n      // 상태 업데이트\n      setPrivateKey(newPrivateKey);\n      setMessage('Sign Up Completed. Your private key has been saved in local storage');\n      setError(''); // 에러 메시지 초기화\n      \n      console.log('Sign Up Completed');\n    } catch (err) {\n      console.error('Error during sign up:', err);\n      setError('Failed to generate key pair. Please ensure all dependencies are installed.');\n    }\n  };\n\n  const copyPrivateKey= () => {\n    // 누르면 privatekey 복사될 수 있도록 해주세요 !\n  };\n\n  return {\n    privateKey,\n    message,\n    error,\n    handleSignUp,\n    copyPrivateKey,\n  };\n};\n\nexport default useSignUp;\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF;MACA,MAAM;QAAEC;MAAG,CAAC,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC;MACvC,MAAMC,EAAE,GAAG,IAAID,EAAE,CAAC,WAAW,CAAC;;MAE9B;MACA,MAAME,GAAG,GAAGD,EAAE,CAACE,UAAU,CAAC,CAAC;MAC3B,MAAMC,aAAa,GAAGF,GAAG,CAACG,UAAU,CAAC,KAAK,CAAC;;MAE3C;MACAC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEH,aAAa,CAAC;;MAEjD;MACAV,aAAa,CAACU,aAAa,CAAC;MAC5BR,UAAU,CAAC,qEAAqE,CAAC;MACjFE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEdU,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAClC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZF,OAAO,CAACX,KAAK,CAAC,uBAAuB,EAAEa,GAAG,CAAC;MAC3CZ,QAAQ,CAAC,4EAA4E,CAAC;IACxF;EACF,CAAC;EAED,MAAMa,cAAc,GAAEA,CAAA,KAAM;IAC1B;EAAA,CACD;EAED,OAAO;IACLlB,UAAU;IACVE,OAAO;IACPE,KAAK;IACLE,YAAY;IACZY;EACF,CAAC;AACH,CAAC;AAACnB,EAAA,CAzCID,SAAS;AA2Cf,eAAeA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}